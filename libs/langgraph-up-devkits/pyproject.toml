[project]
name = "langgraph-up-devkits"
version = "0.2.0"
description = "Development toolkit for LangGraph agents with middleware, context schemas, and provider integrations"
authors = [
    { name = "Haili Zhang", email = "haili.zhang@outlook.com" },
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.11,<4.0"
keywords = ["langgraph", "langchain", "agents", "ai", "llm", "middleware"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "langchain>=1.0.0a12",
    "langchain-dev-utils>=0.1.17",
    "tavily-python>=0.7.12",
    "langchain-mcp-adapters>=0.1.11",
    "langchain-openai>=1.0.0a4",
]

[project.urls]
Homepage = "https://github.com/webup/langgraph-up-monorepo"
Documentation = "https://github.com/webup/langgraph-up-monorepo/tree/main/libs/langgraph-up-devkits"
Repository = "https://github.com/webup/langgraph-up-monorepo"
Issues = "https://github.com/webup/langgraph-up-monorepo/issues"

[project.optional-dependencies]
# Development dependencies
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.11.1",
    "pre-commit>=3.0.0",
]

[build-system]
requires = ["setuptools>=73.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Test configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "-v",
]
filterwarnings = [
    "ignore:AgentStatePydantic has been moved to langchain.agents:DeprecationWarning",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "requires_providers: Tests requiring provider packages",
]

[tool.coverage.run]
source = ["src/langgraph_up_devkits"]
omit = [
    "*/tests/*",
    "*/testing/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "langchain_qwq.*",
    "langchain_siliconflow.*",
    "langchain_tavily.*",
    "langchain_dev_utils.*",
    "langchain_mcp_adapters.*",
    "requests",
    "aiohttp",
]
ignore_missing_imports = true

# Inherit ruff config from root
[tool.ruff]
src = ["src", "tests"]
line-length = 120
lint.select = [
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "ASYNC", # async/await checks
]
lint.ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[dependency-groups]
dev = [
    "build>=1.3.0",
    "twine>=6.2.0",
]
test = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-dotenv>=0.5.2",
    "pytest-mock>=3.15.0",
    "pytest-xdist>=3.8.0",
    "httpx>=0.28.1",
    "respx>=0.22.0",
]
